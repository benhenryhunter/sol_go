// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stickyBoizz

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StickyBoizzMetaData contains all meta data concerning the StickyBoizz contract.
var StickyBoizzMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"presaleAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"editPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfMints\",\"type\":\"uint256\"}],\"name\":\"mintPresale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"presaleWhitelist\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405266038d7ea4c68000600d556000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055503480156200005257600080fd5b5060405162004cda38038062004cda833981810160405281019062000078919062000434565b8282816000908051906020019062000092929190620001ac565b508060019080519060200190620000ab929190620001ac565b505050620000ce620000c2620000de60201b60201c565b620000e660201b60201c565b80600c8190555050505062000533565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001ba90620004fd565b90600052602060002090601f016020900481019282620001de57600085556200022a565b82601f10620001f957805160ff19168380011785556200022a565b828001600101855582156200022a579182015b82811115620002295782518255916020019190600101906200020c565b5b5090506200023991906200023d565b5090565b5b80821115620002585760008160009055506001016200023e565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002c5826200027a565b810181811067ffffffffffffffff82111715620002e757620002e66200028b565b5b80604052505050565b6000620002fc6200025c565b90506200030a8282620002ba565b919050565b600067ffffffffffffffff8211156200032d576200032c6200028b565b5b62000338826200027a565b9050602081019050919050565b60005b838110156200036557808201518184015260208101905062000348565b8381111562000375576000848401525b50505050565b6000620003926200038c846200030f565b620002f0565b905082815260208101848484011115620003b157620003b062000275565b5b620003be84828562000345565b509392505050565b600082601f830112620003de57620003dd62000270565b5b8151620003f08482602086016200037b565b91505092915050565b6000819050919050565b6200040e81620003f9565b81146200041a57600080fd5b50565b6000815190506200042e8162000403565b92915050565b60008060006060848603121562000450576200044f62000266565b5b600084015167ffffffffffffffff8111156200047157620004706200026b565b5b6200047f86828701620003c6565b935050602084015167ffffffffffffffff811115620004a357620004a26200026b565b5b620004b186828701620003c6565b9250506040620004c4868287016200041d565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200051657607f821691505b602082108114156200052d576200052c620004ce565b5b50919050565b61479780620005436000396000f3fe6080604052600436106101ee5760003560e01c806368428a1b1161010d578063a0712d68116100a0578063d5abeb011161006f578063d5abeb01146106c8578063e985e9c5146106f3578063eb8835ab14610730578063f2fde38b1461076d578063f759867a14610796576101ee565b8063a0712d681461061d578063a22cb46514610639578063b88d4fde14610662578063c87b56dd1461068b576101ee565b80638da5cb5b116100dc5780638da5cb5b1461057357806391b7f5ed1461059e57806395d89b41146105c7578063a035b1fe146105f2576101ee565b806368428a1b146104dd57806370a0823114610508578063715018a6146105455780637d8966e41461055c576101ee565b806334393743116101855780634f6ccce7116101545780634f6ccce71461040f57806353135ca01461044c57806355f804b3146104775780636352211e146104a0576101ee565b8063343937431461037b5780633ccfd60b1461039257806342842e0e146103a9578063438b6300146103d2576101ee565b806318160ddd116101c157806318160ddd146102c157806323b872dd146102ec57806326ed7155146103155780632f745c591461033e576101ee565b806301ffc9a7146101f357806306fdde0314610230578063081812fc1461025b578063095ea7b314610298575b600080fd5b3480156101ff57600080fd5b5061021a60048036038101906102159190612e2e565b6107b2565b6040516102279190612e76565b60405180910390f35b34801561023c57600080fd5b5061024561082c565b6040516102529190612f2a565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190612f82565b6108be565b60405161028f9190612ff0565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba9190613037565b610943565b005b3480156102cd57600080fd5b506102d6610a5b565b6040516102e39190613086565b60405180910390f35b3480156102f857600080fd5b50610313600480360381019061030e91906130a1565b610a68565b005b34801561032157600080fd5b5061033c600480360381019061033791906131af565b610ac8565b005b34801561034a57600080fd5b5061036560048036038101906103609190613037565b610bf0565b6040516103729190613086565b60405180910390f35b34801561038757600080fd5b50610390610c95565b005b34801561039e57600080fd5b506103a7610d3d565b005b3480156103b557600080fd5b506103d060048036038101906103cb91906130a1565b610e02565b005b3480156103de57600080fd5b506103f960048036038101906103f49190613230565b610e22565b604051610406919061331b565b60405180910390f35b34801561041b57600080fd5b5061043660048036038101906104319190612f82565b610ed0565b6040516104439190613086565b60405180910390f35b34801561045857600080fd5b50610461610f41565b60405161046e9190612e76565b60405180910390f35b34801561048357600080fd5b5061049e6004803603810190610499919061346d565b610f54565b005b3480156104ac57600080fd5b506104c760048036038101906104c29190612f82565b610fea565b6040516104d49190612ff0565b60405180910390f35b3480156104e957600080fd5b506104f261109c565b6040516104ff9190612e76565b60405180910390f35b34801561051457600080fd5b5061052f600480360381019061052a9190613230565b6110af565b60405161053c9190613086565b60405180910390f35b34801561055157600080fd5b5061055a611167565b005b34801561056857600080fd5b506105716111ef565b005b34801561057f57600080fd5b50610588611297565b6040516105959190612ff0565b60405180910390f35b3480156105aa57600080fd5b506105c560048036038101906105c09190612f82565b6112c1565b005b3480156105d357600080fd5b506105dc611347565b6040516105e99190612f2a565b60405180910390f35b3480156105fe57600080fd5b506106076113d9565b6040516106149190613086565b60405180910390f35b61063760048036038101906106329190612f82565b6113df565b005b34801561064557600080fd5b50610660600480360381019061065b91906134e2565b61156e565b005b34801561066e57600080fd5b50610689600480360381019061068491906135c3565b611584565b005b34801561069757600080fd5b506106b260048036038101906106ad9190612f82565b6115e6565b6040516106bf9190612f2a565b60405180910390f35b3480156106d457600080fd5b506106dd61168d565b6040516106ea9190613086565b60405180910390f35b3480156106ff57600080fd5b5061071a60048036038101906107159190613646565b611693565b6040516107279190612e76565b60405180910390f35b34801561073c57600080fd5b5061075760048036038101906107529190613230565b611727565b6040516107649190613086565b60405180910390f35b34801561077957600080fd5b50610794600480360381019061078f9190613230565b61173f565b005b6107b060048036038101906107ab9190612f82565b611837565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610825575061082482611a91565b5b9050919050565b60606000805461083b906136b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610867906136b5565b80156108b45780601f10610889576101008083540402835291602001916108b4565b820191906000526020600020905b81548152906001019060200180831161089757829003601f168201915b5050505050905090565b60006108c982611b73565b610908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ff90613759565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061094e82610fea565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b6906137eb565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109de611bdf565b73ffffffffffffffffffffffffffffffffffffffff161480610a0d5750610a0c81610a07611bdf565b611693565b5b610a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a439061387d565b60405180910390fd5b610a568383611be7565b505050565b6000600880549050905090565b610a79610a73611bdf565b82611ca0565b610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf9061390f565b60405180910390fd5b610ac3838383611d7e565b505050565b610ad0611bdf565b73ffffffffffffffffffffffffffffffffffffffff16610aee611297565b73ffffffffffffffffffffffffffffffffffffffff1614610b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3b9061397b565b60405180910390fd5b60005b84849050811015610be957828282818110610b6557610b6461399b565b5b90506020020135600f6000878785818110610b8357610b8261399b565b5b9050602002016020810190610b989190613230565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610be1906139f9565b915050610b47565b5050505050565b6000610bfb836110af565b8210610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3390613ab4565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610c9d611bdf565b73ffffffffffffffffffffffffffffffffffffffff16610cbb611297565b73ffffffffffffffffffffffffffffffffffffffff1614610d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d089061397b565b60405180910390fd5b600e60009054906101000a900460ff1615600e60006101000a81548160ff021916908315150217905550565b610d45611bdf565b73ffffffffffffffffffffffffffffffffffffffff16610d63611297565b73ffffffffffffffffffffffffffffffffffffffff1614610db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db09061397b565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610dff573d6000803e3d6000fd5b50565b610e1d83838360405180602001604052806000815250611584565b505050565b60606000610e2f836110af565b905060008167ffffffffffffffff811115610e4d57610e4c613342565b5b604051908082528060200260200182016040528015610e7b5781602001602082028036833780820191505090505b50905060005b82811015610ec557610e938582610bf0565b828281518110610ea657610ea561399b565b5b6020026020010181815250508080610ebd906139f9565b915050610e81565b508092505050919050565b6000610eda610a5b565b8210610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290613b46565b60405180910390fd5b60088281548110610f2f57610f2e61399b565b5b90600052602060002001549050919050565b600e60009054906101000a900460ff1681565b610f5c611bdf565b73ffffffffffffffffffffffffffffffffffffffff16610f7a611297565b73ffffffffffffffffffffffffffffffffffffffff1614610fd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc79061397b565b60405180910390fd5b80600b9080519060200190610fe6929190612d1f565b5050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611093576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108a90613bd8565b60405180910390fd5b80915050919050565b600e60019054906101000a900460ff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611120576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111790613c6a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61116f611bdf565b73ffffffffffffffffffffffffffffffffffffffff1661118d611297565b73ffffffffffffffffffffffffffffffffffffffff16146111e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111da9061397b565b60405180910390fd5b6111ed6000611fe5565b565b6111f7611bdf565b73ffffffffffffffffffffffffffffffffffffffff16611215611297565b73ffffffffffffffffffffffffffffffffffffffff161461126b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112629061397b565b60405180910390fd5b600e60019054906101000a900460ff1615600e60016101000a81548160ff021916908315150217905550565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112c9611bdf565b73ffffffffffffffffffffffffffffffffffffffff166112e7611297565b73ffffffffffffffffffffffffffffffffffffffff161461133d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113349061397b565b60405180910390fd5b80600d8190555050565b606060018054611356906136b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611382906136b5565b80156113cf5780601f106113a4576101008083540402835291602001916113cf565b820191906000526020600020905b8154815290600101906020018083116113b257829003601f168201915b5050505050905090565b600d5481565b60006113e9610a5b565b9050600e60019054906101000a900460ff1661143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190613cd6565b60405180910390fd5b60008211801561144a5750600b82105b611489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148090613d42565b60405180910390fd5b600c5461149f83836120ab90919063ffffffff16565b11156114e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d790613dd4565b60405180910390fd5b346114f683600d546120c190919063ffffffff16565b14611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152d90613e40565b60405180910390fd5b60005b82811015611569576115563382846115519190613e60565b6120d7565b8080611561906139f9565b915050611539565b505050565b611580611579611bdf565b83836120f5565b5050565b61159561158f611bdf565b83611ca0565b6115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cb9061390f565b60405180910390fd5b6115e084848484612262565b50505050565b60606115f182611b73565b611630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162790613f28565b60405180910390fd5b600061163a6122be565b9050600081511161165a5760405180602001604052806000815250611685565b8061166484612350565b604051602001611675929190613f84565b6040516020818303038152906040525b915050919050565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600f6020528060005260406000206000915090505481565b611747611bdf565b73ffffffffffffffffffffffffffffffffffffffff16611765611297565b73ffffffffffffffffffffffffffffffffffffffff16146117bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b29061397b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561182b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118229061401a565b60405180910390fd5b61183481611fe5565b50565b6000611841610a5b565b90506000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600e60009054906101000a900460ff166118d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cd90614086565b60405180910390fd5b60008111611919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191090614118565b60405180910390fd5b8083111561195c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195390614184565b60405180910390fd5b600c5461197284846120ab90919063ffffffff16565b11156119b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119aa90613dd4565b60405180910390fd5b346119c984600d546120c190919063ffffffff16565b14611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0090613e40565b60405180910390fd5b8281611a1591906141a4565b600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060005b83811015611a8b57611a78338285611a739190613e60565b6120d7565b8080611a83906139f9565b915050611a5b565b50505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611b5c57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611b6c5750611b6b826124b1565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c5a83610fea565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611cab82611b73565b611cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ce19061424a565b60405180910390fd5b6000611cf583610fea565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d6457508373ffffffffffffffffffffffffffffffffffffffff16611d4c846108be565b73ffffffffffffffffffffffffffffffffffffffff16145b80611d755750611d748185611693565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d9e82610fea565b73ffffffffffffffffffffffffffffffffffffffff1614611df4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611deb906142dc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5b9061436e565b60405180910390fd5b611e6f83838361251b565b611e7a600082611be7565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eca91906141a4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f219190613e60565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611fe083838361262f565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836120b99190613e60565b905092915050565b600081836120cf919061438e565b905092915050565b6120f1828260405180602001604052806000815250612634565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612164576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215b90614434565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516122559190612e76565b60405180910390a3505050565b61226d848484611d7e565b6122798484848461268f565b6122b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122af906144c6565b60405180910390fd5b50505050565b6060600b80546122cd906136b5565b80601f01602080910402602001604051908101604052809291908181526020018280546122f9906136b5565b80156123465780601f1061231b57610100808354040283529160200191612346565b820191906000526020600020905b81548152906001019060200180831161232957829003601f168201915b5050505050905090565b60606000821415612398576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506124ac565b600082905060005b600082146123ca5780806123b3906139f9565b915050600a826123c39190614515565b91506123a0565b60008167ffffffffffffffff8111156123e6576123e5613342565b5b6040519080825280601f01601f1916602001820160405280156124185781602001600182028036833780820191505090505b5090505b600085146124a55760018261243191906141a4565b9150600a856124409190614546565b603061244c9190613e60565b60f81b8183815181106124625761246161399b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561249e9190614515565b945061241c565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612526838383612817565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612569576125648161281c565b6125a8565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146125a7576125a68382612865565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156125eb576125e6816129d2565b61262a565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612629576126288282612aa3565b5b5b505050565b505050565b61263e8383612b22565b61264b600084848461268f565b61268a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612681906144c6565b60405180910390fd5b505050565b60006126b08473ffffffffffffffffffffffffffffffffffffffff16612cfc565b1561280a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026126d9611bdf565b8786866040518563ffffffff1660e01b81526004016126fb94939291906145cc565b6020604051808303816000875af192505050801561273757506040513d601f19601f82011682018060405250810190612734919061462d565b60015b6127ba573d8060008114612767576040519150601f19603f3d011682016040523d82523d6000602084013e61276c565b606091505b506000815114156127b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a9906144c6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061280f565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612872846110af565b61287c91906141a4565b9050600060076000848152602001908152602001600020549050818114612961576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506129e691906141a4565b9050600060096000848152602001908152602001600020549050600060088381548110612a1657612a1561399b565b5b906000526020600020015490508060088381548110612a3857612a3761399b565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612a8757612a8661465a565b5b6001900381819060005260206000200160009055905550505050565b6000612aae836110af565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b89906146d5565b60405180910390fd5b612b9b81611b73565b15612bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd290614741565b60405180910390fd5b612be76000838361251b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612c379190613e60565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612cf86000838361262f565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054612d2b906136b5565b90600052602060002090601f016020900481019282612d4d5760008555612d94565b82601f10612d6657805160ff1916838001178555612d94565b82800160010185558215612d94579182015b82811115612d93578251825591602001919060010190612d78565b5b509050612da19190612da5565b5090565b5b80821115612dbe576000816000905550600101612da6565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612e0b81612dd6565b8114612e1657600080fd5b50565b600081359050612e2881612e02565b92915050565b600060208284031215612e4457612e43612dcc565b5b6000612e5284828501612e19565b91505092915050565b60008115159050919050565b612e7081612e5b565b82525050565b6000602082019050612e8b6000830184612e67565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612ecb578082015181840152602081019050612eb0565b83811115612eda576000848401525b50505050565b6000601f19601f8301169050919050565b6000612efc82612e91565b612f068185612e9c565b9350612f16818560208601612ead565b612f1f81612ee0565b840191505092915050565b60006020820190508181036000830152612f448184612ef1565b905092915050565b6000819050919050565b612f5f81612f4c565b8114612f6a57600080fd5b50565b600081359050612f7c81612f56565b92915050565b600060208284031215612f9857612f97612dcc565b5b6000612fa684828501612f6d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612fda82612faf565b9050919050565b612fea81612fcf565b82525050565b60006020820190506130056000830184612fe1565b92915050565b61301481612fcf565b811461301f57600080fd5b50565b6000813590506130318161300b565b92915050565b6000806040838503121561304e5761304d612dcc565b5b600061305c85828601613022565b925050602061306d85828601612f6d565b9150509250929050565b61308081612f4c565b82525050565b600060208201905061309b6000830184613077565b92915050565b6000806000606084860312156130ba576130b9612dcc565b5b60006130c886828701613022565b93505060206130d986828701613022565b92505060406130ea86828701612f6d565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f840112613119576131186130f4565b5b8235905067ffffffffffffffff811115613136576131356130f9565b5b602083019150836020820283011115613152576131516130fe565b5b9250929050565b60008083601f84011261316f5761316e6130f4565b5b8235905067ffffffffffffffff81111561318c5761318b6130f9565b5b6020830191508360208202830111156131a8576131a76130fe565b5b9250929050565b600080600080604085870312156131c9576131c8612dcc565b5b600085013567ffffffffffffffff8111156131e7576131e6612dd1565b5b6131f387828801613103565b9450945050602085013567ffffffffffffffff81111561321657613215612dd1565b5b61322287828801613159565b925092505092959194509250565b60006020828403121561324657613245612dcc565b5b600061325484828501613022565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61329281612f4c565b82525050565b60006132a48383613289565b60208301905092915050565b6000602082019050919050565b60006132c88261325d565b6132d28185613268565b93506132dd83613279565b8060005b8381101561330e5781516132f58882613298565b9750613300836132b0565b9250506001810190506132e1565b5085935050505092915050565b6000602082019050818103600083015261333581846132bd565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61337a82612ee0565b810181811067ffffffffffffffff8211171561339957613398613342565b5b80604052505050565b60006133ac612dc2565b90506133b88282613371565b919050565b600067ffffffffffffffff8211156133d8576133d7613342565b5b6133e182612ee0565b9050602081019050919050565b82818337600083830152505050565b600061341061340b846133bd565b6133a2565b90508281526020810184848401111561342c5761342b61333d565b5b6134378482856133ee565b509392505050565b600082601f830112613454576134536130f4565b5b81356134648482602086016133fd565b91505092915050565b60006020828403121561348357613482612dcc565b5b600082013567ffffffffffffffff8111156134a1576134a0612dd1565b5b6134ad8482850161343f565b91505092915050565b6134bf81612e5b565b81146134ca57600080fd5b50565b6000813590506134dc816134b6565b92915050565b600080604083850312156134f9576134f8612dcc565b5b600061350785828601613022565b9250506020613518858286016134cd565b9150509250929050565b600067ffffffffffffffff82111561353d5761353c613342565b5b61354682612ee0565b9050602081019050919050565b600061356661356184613522565b6133a2565b9050828152602081018484840111156135825761358161333d565b5b61358d8482856133ee565b509392505050565b600082601f8301126135aa576135a96130f4565b5b81356135ba848260208601613553565b91505092915050565b600080600080608085870312156135dd576135dc612dcc565b5b60006135eb87828801613022565b94505060206135fc87828801613022565b935050604061360d87828801612f6d565b925050606085013567ffffffffffffffff81111561362e5761362d612dd1565b5b61363a87828801613595565b91505092959194509250565b6000806040838503121561365d5761365c612dcc565b5b600061366b85828601613022565b925050602061367c85828601613022565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806136cd57607f821691505b602082108114156136e1576136e0613686565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000613743602c83612e9c565b915061374e826136e7565b604082019050919050565b6000602082019050818103600083015261377281613736565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006137d5602183612e9c565b91506137e082613779565b604082019050919050565b60006020820190508181036000830152613804816137c8565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000613867603883612e9c565b91506138728261380b565b604082019050919050565b600060208201905081810360008301526138968161385a565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b60006138f9603183612e9c565b91506139048261389d565b604082019050919050565b60006020820190508181036000830152613928816138ec565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613965602083612e9c565b91506139708261392f565b602082019050919050565b6000602082019050818103600083015261399481613958565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613a0482612f4c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a3757613a366139ca565b5b600182019050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613a9e602b83612e9c565b9150613aa982613a42565b604082019050919050565b60006020820190508181036000830152613acd81613a91565b9050919050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613b30602c83612e9c565b9150613b3b82613ad4565b604082019050919050565b60006020820190508181036000830152613b5f81613b23565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000613bc2602983612e9c565b9150613bcd82613b66565b604082019050919050565b60006020820190508181036000830152613bf181613bb5565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613c54602a83612e9c565b9150613c5f82613bf8565b604082019050919050565b60006020820190508181036000830152613c8381613c47565b9050919050565b7f53616c65206d7573742062652061637469766520746f206d696e740000000000600082015250565b6000613cc0601b83612e9c565b9150613ccb82613c8a565b602082019050919050565b60006020820190508181036000830152613cef81613cb3565b9050919050565b7f496e76616c696420707572636861736520616d6f756e74000000000000000000600082015250565b6000613d2c601783612e9c565b9150613d3782613cf6565b602082019050919050565b60006020820190508181036000830152613d5b81613d1f565b9050919050565b7f507572636861736520776f756c6420657863656564206d617820737570706c7960008201527f206f6620746f6b656e7300000000000000000000000000000000000000000000602082015250565b6000613dbe602a83612e9c565b9150613dc982613d62565b604082019050919050565b60006020820190508181036000830152613ded81613db1565b9050919050565b7f45746865722076616c75652073656e74206973206e6f7420636f727265637400600082015250565b6000613e2a601f83612e9c565b9150613e3582613df4565b602082019050919050565b60006020820190508181036000830152613e5981613e1d565b9050919050565b6000613e6b82612f4c565b9150613e7683612f4c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613eab57613eaa6139ca565b5b828201905092915050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613f12602f83612e9c565b9150613f1d82613eb6565b604082019050919050565b60006020820190508181036000830152613f4181613f05565b9050919050565b600081905092915050565b6000613f5e82612e91565b613f688185613f48565b9350613f78818560208601612ead565b80840191505092915050565b6000613f908285613f53565b9150613f9c8284613f53565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614004602683612e9c565b915061400f82613fa8565b604082019050919050565b6000602082019050818103600083015261403381613ff7565b9050919050565b7f50726573616c65206d7573742062652061637469766520746f206d696e740000600082015250565b6000614070601e83612e9c565b915061407b8261403a565b602082019050919050565b6000602082019050818103600083015261409f81614063565b9050919050565b7f4e6f20746f6b656e7320726573657276656420666f722074686973206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614102602383612e9c565b915061410d826140a6565b604082019050919050565b60006020820190508181036000830152614131816140f5565b9050919050565b7f43616e2774206d696e74206d6f7265207468616e207265736572766564000000600082015250565b600061416e601d83612e9c565b915061417982614138565b602082019050919050565b6000602082019050818103600083015261419d81614161565b9050919050565b60006141af82612f4c565b91506141ba83612f4c565b9250828210156141cd576141cc6139ca565b5b828203905092915050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614234602c83612e9c565b915061423f826141d8565b604082019050919050565b6000602082019050818103600083015261426381614227565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006142c6602583612e9c565b91506142d18261426a565b604082019050919050565b600060208201905081810360008301526142f5816142b9565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614358602483612e9c565b9150614363826142fc565b604082019050919050565b600060208201905081810360008301526143878161434b565b9050919050565b600061439982612f4c565b91506143a483612f4c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156143dd576143dc6139ca565b5b828202905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061441e601983612e9c565b9150614429826143e8565b602082019050919050565b6000602082019050818103600083015261444d81614411565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006144b0603283612e9c565b91506144bb82614454565b604082019050919050565b600060208201905081810360008301526144df816144a3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061452082612f4c565b915061452b83612f4c565b92508261453b5761453a6144e6565b5b828204905092915050565b600061455182612f4c565b915061455c83612f4c565b92508261456c5761456b6144e6565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b600061459e82614577565b6145a88185614582565b93506145b8818560208601612ead565b6145c181612ee0565b840191505092915050565b60006080820190506145e16000830187612fe1565b6145ee6020830186612fe1565b6145fb6040830185613077565b818103606083015261460d8184614593565b905095945050505050565b60008151905061462781612e02565b92915050565b60006020828403121561464357614642612dcc565b5b600061465184828501614618565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006146bf602083612e9c565b91506146ca82614689565b602082019050919050565b600060208201905081810360008301526146ee816146b2565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061472b601c83612e9c565b9150614736826146f5565b602082019050919050565b6000602082019050818103600083015261475a8161471e565b905091905056fea2646970667358221220de5fa9cfa70aa0162942c763ef5570a7e4cf647e5c8d6a4a11c1b311a28cf07d64736f6c634300080c0033",
}

// StickyBoizzABI is the input ABI used to generate the binding from.
// Deprecated: Use StickyBoizzMetaData.ABI instead.
var StickyBoizzABI = StickyBoizzMetaData.ABI

// StickyBoizzBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StickyBoizzMetaData.Bin instead.
var StickyBoizzBin = StickyBoizzMetaData.Bin

// DeployStickyBoizz deploys a new Ethereum contract, binding an instance of StickyBoizz to it.
func DeployStickyBoizz(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, supply *big.Int) (common.Address, *types.Transaction, *StickyBoizz, error) {
	parsed, err := StickyBoizzMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StickyBoizzBin), backend, name, symbol, supply)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StickyBoizz{StickyBoizzCaller: StickyBoizzCaller{contract: contract}, StickyBoizzTransactor: StickyBoizzTransactor{contract: contract}, StickyBoizzFilterer: StickyBoizzFilterer{contract: contract}}, nil
}

// StickyBoizz is an auto generated Go binding around an Ethereum contract.
type StickyBoizz struct {
	StickyBoizzCaller     // Read-only binding to the contract
	StickyBoizzTransactor // Write-only binding to the contract
	StickyBoizzFilterer   // Log filterer for contract events
}

// StickyBoizzCaller is an auto generated read-only Go binding around an Ethereum contract.
type StickyBoizzCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StickyBoizzTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StickyBoizzTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StickyBoizzFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StickyBoizzFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StickyBoizzSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StickyBoizzSession struct {
	Contract     *StickyBoizz      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StickyBoizzCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StickyBoizzCallerSession struct {
	Contract *StickyBoizzCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// StickyBoizzTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StickyBoizzTransactorSession struct {
	Contract     *StickyBoizzTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// StickyBoizzRaw is an auto generated low-level Go binding around an Ethereum contract.
type StickyBoizzRaw struct {
	Contract *StickyBoizz // Generic contract binding to access the raw methods on
}

// StickyBoizzCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StickyBoizzCallerRaw struct {
	Contract *StickyBoizzCaller // Generic read-only contract binding to access the raw methods on
}

// StickyBoizzTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StickyBoizzTransactorRaw struct {
	Contract *StickyBoizzTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStickyBoizz creates a new instance of StickyBoizz, bound to a specific deployed contract.
func NewStickyBoizz(address common.Address, backend bind.ContractBackend) (*StickyBoizz, error) {
	contract, err := bindStickyBoizz(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StickyBoizz{StickyBoizzCaller: StickyBoizzCaller{contract: contract}, StickyBoizzTransactor: StickyBoizzTransactor{contract: contract}, StickyBoizzFilterer: StickyBoizzFilterer{contract: contract}}, nil
}

// NewStickyBoizzCaller creates a new read-only instance of StickyBoizz, bound to a specific deployed contract.
func NewStickyBoizzCaller(address common.Address, caller bind.ContractCaller) (*StickyBoizzCaller, error) {
	contract, err := bindStickyBoizz(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzCaller{contract: contract}, nil
}

// NewStickyBoizzTransactor creates a new write-only instance of StickyBoizz, bound to a specific deployed contract.
func NewStickyBoizzTransactor(address common.Address, transactor bind.ContractTransactor) (*StickyBoizzTransactor, error) {
	contract, err := bindStickyBoizz(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzTransactor{contract: contract}, nil
}

// NewStickyBoizzFilterer creates a new log filterer instance of StickyBoizz, bound to a specific deployed contract.
func NewStickyBoizzFilterer(address common.Address, filterer bind.ContractFilterer) (*StickyBoizzFilterer, error) {
	contract, err := bindStickyBoizz(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzFilterer{contract: contract}, nil
}

// bindStickyBoizz binds a generic wrapper to an already deployed contract.
func bindStickyBoizz(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StickyBoizzABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StickyBoizz *StickyBoizzRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StickyBoizz.Contract.StickyBoizzCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StickyBoizz *StickyBoizzRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StickyBoizz.Contract.StickyBoizzTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StickyBoizz *StickyBoizzRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StickyBoizz.Contract.StickyBoizzTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StickyBoizz *StickyBoizzCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StickyBoizz.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StickyBoizz *StickyBoizzTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StickyBoizz.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StickyBoizz *StickyBoizzTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StickyBoizz.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StickyBoizz.Contract.BalanceOf(&_StickyBoizz.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _StickyBoizz.Contract.BalanceOf(&_StickyBoizz.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StickyBoizz *StickyBoizzCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StickyBoizz *StickyBoizzSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StickyBoizz.Contract.GetApproved(&_StickyBoizz.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_StickyBoizz *StickyBoizzCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _StickyBoizz.Contract.GetApproved(&_StickyBoizz.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StickyBoizz *StickyBoizzCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StickyBoizz *StickyBoizzSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StickyBoizz.Contract.IsApprovedForAll(&_StickyBoizz.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_StickyBoizz *StickyBoizzCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _StickyBoizz.Contract.IsApprovedForAll(&_StickyBoizz.CallOpts, owner, operator)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) MaxSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "maxSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) MaxSupply() (*big.Int, error) {
	return _StickyBoizz.Contract.MaxSupply(&_StickyBoizz.CallOpts)
}

// MaxSupply is a free data retrieval call binding the contract method 0xd5abeb01.
//
// Solidity: function maxSupply() view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) MaxSupply() (*big.Int, error) {
	return _StickyBoizz.Contract.MaxSupply(&_StickyBoizz.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StickyBoizz *StickyBoizzCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StickyBoizz *StickyBoizzSession) Name() (string, error) {
	return _StickyBoizz.Contract.Name(&_StickyBoizz.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_StickyBoizz *StickyBoizzCallerSession) Name() (string, error) {
	return _StickyBoizz.Contract.Name(&_StickyBoizz.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StickyBoizz *StickyBoizzCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StickyBoizz *StickyBoizzSession) Owner() (common.Address, error) {
	return _StickyBoizz.Contract.Owner(&_StickyBoizz.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_StickyBoizz *StickyBoizzCallerSession) Owner() (common.Address, error) {
	return _StickyBoizz.Contract.Owner(&_StickyBoizz.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StickyBoizz *StickyBoizzCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StickyBoizz *StickyBoizzSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StickyBoizz.Contract.OwnerOf(&_StickyBoizz.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_StickyBoizz *StickyBoizzCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _StickyBoizz.Contract.OwnerOf(&_StickyBoizz.CallOpts, tokenId)
}

// PresaleActive is a free data retrieval call binding the contract method 0x53135ca0.
//
// Solidity: function presaleActive() view returns(bool)
func (_StickyBoizz *StickyBoizzCaller) PresaleActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "presaleActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// PresaleActive is a free data retrieval call binding the contract method 0x53135ca0.
//
// Solidity: function presaleActive() view returns(bool)
func (_StickyBoizz *StickyBoizzSession) PresaleActive() (bool, error) {
	return _StickyBoizz.Contract.PresaleActive(&_StickyBoizz.CallOpts)
}

// PresaleActive is a free data retrieval call binding the contract method 0x53135ca0.
//
// Solidity: function presaleActive() view returns(bool)
func (_StickyBoizz *StickyBoizzCallerSession) PresaleActive() (bool, error) {
	return _StickyBoizz.Contract.PresaleActive(&_StickyBoizz.CallOpts)
}

// PresaleWhitelist is a free data retrieval call binding the contract method 0xeb8835ab.
//
// Solidity: function presaleWhitelist(address ) view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) PresaleWhitelist(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "presaleWhitelist", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PresaleWhitelist is a free data retrieval call binding the contract method 0xeb8835ab.
//
// Solidity: function presaleWhitelist(address ) view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) PresaleWhitelist(arg0 common.Address) (*big.Int, error) {
	return _StickyBoizz.Contract.PresaleWhitelist(&_StickyBoizz.CallOpts, arg0)
}

// PresaleWhitelist is a free data retrieval call binding the contract method 0xeb8835ab.
//
// Solidity: function presaleWhitelist(address ) view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) PresaleWhitelist(arg0 common.Address) (*big.Int, error) {
	return _StickyBoizz.Contract.PresaleWhitelist(&_StickyBoizz.CallOpts, arg0)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) Price(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "price")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) Price() (*big.Int, error) {
	return _StickyBoizz.Contract.Price(&_StickyBoizz.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) Price() (*big.Int, error) {
	return _StickyBoizz.Contract.Price(&_StickyBoizz.CallOpts)
}

// SaleActive is a free data retrieval call binding the contract method 0x68428a1b.
//
// Solidity: function saleActive() view returns(bool)
func (_StickyBoizz *StickyBoizzCaller) SaleActive(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "saleActive")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SaleActive is a free data retrieval call binding the contract method 0x68428a1b.
//
// Solidity: function saleActive() view returns(bool)
func (_StickyBoizz *StickyBoizzSession) SaleActive() (bool, error) {
	return _StickyBoizz.Contract.SaleActive(&_StickyBoizz.CallOpts)
}

// SaleActive is a free data retrieval call binding the contract method 0x68428a1b.
//
// Solidity: function saleActive() view returns(bool)
func (_StickyBoizz *StickyBoizzCallerSession) SaleActive() (bool, error) {
	return _StickyBoizz.Contract.SaleActive(&_StickyBoizz.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StickyBoizz *StickyBoizzCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StickyBoizz *StickyBoizzSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StickyBoizz.Contract.SupportsInterface(&_StickyBoizz.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_StickyBoizz *StickyBoizzCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _StickyBoizz.Contract.SupportsInterface(&_StickyBoizz.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StickyBoizz *StickyBoizzCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StickyBoizz *StickyBoizzSession) Symbol() (string, error) {
	return _StickyBoizz.Contract.Symbol(&_StickyBoizz.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_StickyBoizz *StickyBoizzCallerSession) Symbol() (string, error) {
	return _StickyBoizz.Contract.Symbol(&_StickyBoizz.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _StickyBoizz.Contract.TokenByIndex(&_StickyBoizz.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _StickyBoizz.Contract.TokenByIndex(&_StickyBoizz.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _StickyBoizz.Contract.TokenOfOwnerByIndex(&_StickyBoizz.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _StickyBoizz.Contract.TokenOfOwnerByIndex(&_StickyBoizz.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StickyBoizz *StickyBoizzCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StickyBoizz *StickyBoizzSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StickyBoizz.Contract.TokenURI(&_StickyBoizz.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_StickyBoizz *StickyBoizzCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _StickyBoizz.Contract.TokenURI(&_StickyBoizz.CallOpts, tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StickyBoizz *StickyBoizzCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StickyBoizz *StickyBoizzSession) TotalSupply() (*big.Int, error) {
	return _StickyBoizz.Contract.TotalSupply(&_StickyBoizz.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_StickyBoizz *StickyBoizzCallerSession) TotalSupply() (*big.Int, error) {
	return _StickyBoizz.Contract.TotalSupply(&_StickyBoizz.CallOpts)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address owner) view returns(uint256[])
func (_StickyBoizz *StickyBoizzCaller) WalletOfOwner(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _StickyBoizz.contract.Call(opts, &out, "walletOfOwner", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address owner) view returns(uint256[])
func (_StickyBoizz *StickyBoizzSession) WalletOfOwner(owner common.Address) ([]*big.Int, error) {
	return _StickyBoizz.Contract.WalletOfOwner(&_StickyBoizz.CallOpts, owner)
}

// WalletOfOwner is a free data retrieval call binding the contract method 0x438b6300.
//
// Solidity: function walletOfOwner(address owner) view returns(uint256[])
func (_StickyBoizz *StickyBoizzCallerSession) WalletOfOwner(owner common.Address) ([]*big.Int, error) {
	return _StickyBoizz.Contract.WalletOfOwner(&_StickyBoizz.CallOpts, owner)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.Approve(&_StickyBoizz.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.Approve(&_StickyBoizz.TransactOpts, to, tokenId)
}

// EditPresale is a paid mutator transaction binding the contract method 0x26ed7155.
//
// Solidity: function editPresale(address[] presaleAddresses, uint256[] amount) returns()
func (_StickyBoizz *StickyBoizzTransactor) EditPresale(opts *bind.TransactOpts, presaleAddresses []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "editPresale", presaleAddresses, amount)
}

// EditPresale is a paid mutator transaction binding the contract method 0x26ed7155.
//
// Solidity: function editPresale(address[] presaleAddresses, uint256[] amount) returns()
func (_StickyBoizz *StickyBoizzSession) EditPresale(presaleAddresses []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.EditPresale(&_StickyBoizz.TransactOpts, presaleAddresses, amount)
}

// EditPresale is a paid mutator transaction binding the contract method 0x26ed7155.
//
// Solidity: function editPresale(address[] presaleAddresses, uint256[] amount) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) EditPresale(presaleAddresses []common.Address, amount []*big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.EditPresale(&_StickyBoizz.TransactOpts, presaleAddresses, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 numberOfMints) payable returns()
func (_StickyBoizz *StickyBoizzTransactor) Mint(opts *bind.TransactOpts, numberOfMints *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "mint", numberOfMints)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 numberOfMints) payable returns()
func (_StickyBoizz *StickyBoizzSession) Mint(numberOfMints *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.Mint(&_StickyBoizz.TransactOpts, numberOfMints)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 numberOfMints) payable returns()
func (_StickyBoizz *StickyBoizzTransactorSession) Mint(numberOfMints *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.Mint(&_StickyBoizz.TransactOpts, numberOfMints)
}

// MintPresale is a paid mutator transaction binding the contract method 0xf759867a.
//
// Solidity: function mintPresale(uint256 numberOfMints) payable returns()
func (_StickyBoizz *StickyBoizzTransactor) MintPresale(opts *bind.TransactOpts, numberOfMints *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "mintPresale", numberOfMints)
}

// MintPresale is a paid mutator transaction binding the contract method 0xf759867a.
//
// Solidity: function mintPresale(uint256 numberOfMints) payable returns()
func (_StickyBoizz *StickyBoizzSession) MintPresale(numberOfMints *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.MintPresale(&_StickyBoizz.TransactOpts, numberOfMints)
}

// MintPresale is a paid mutator transaction binding the contract method 0xf759867a.
//
// Solidity: function mintPresale(uint256 numberOfMints) payable returns()
func (_StickyBoizz *StickyBoizzTransactorSession) MintPresale(numberOfMints *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.MintPresale(&_StickyBoizz.TransactOpts, numberOfMints)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StickyBoizz *StickyBoizzTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StickyBoizz *StickyBoizzSession) RenounceOwnership() (*types.Transaction, error) {
	return _StickyBoizz.Contract.RenounceOwnership(&_StickyBoizz.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_StickyBoizz *StickyBoizzTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _StickyBoizz.Contract.RenounceOwnership(&_StickyBoizz.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SafeTransferFrom(&_StickyBoizz.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SafeTransferFrom(&_StickyBoizz.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StickyBoizz *StickyBoizzTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StickyBoizz *StickyBoizzSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SafeTransferFrom0(&_StickyBoizz.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SafeTransferFrom0(&_StickyBoizz.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StickyBoizz *StickyBoizzTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StickyBoizz *StickyBoizzSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SetApprovalForAll(&_StickyBoizz.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SetApprovalForAll(&_StickyBoizz.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_StickyBoizz *StickyBoizzTransactor) SetBaseURI(opts *bind.TransactOpts, uri string) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "setBaseURI", uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_StickyBoizz *StickyBoizzSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SetBaseURI(&_StickyBoizz.TransactOpts, uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string uri) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) SetBaseURI(uri string) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SetBaseURI(&_StickyBoizz.TransactOpts, uri)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 newPrice) returns()
func (_StickyBoizz *StickyBoizzTransactor) SetPrice(opts *bind.TransactOpts, newPrice *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "setPrice", newPrice)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 newPrice) returns()
func (_StickyBoizz *StickyBoizzSession) SetPrice(newPrice *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SetPrice(&_StickyBoizz.TransactOpts, newPrice)
}

// SetPrice is a paid mutator transaction binding the contract method 0x91b7f5ed.
//
// Solidity: function setPrice(uint256 newPrice) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) SetPrice(newPrice *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.SetPrice(&_StickyBoizz.TransactOpts, newPrice)
}

// TogglePresale is a paid mutator transaction binding the contract method 0x34393743.
//
// Solidity: function togglePresale() returns()
func (_StickyBoizz *StickyBoizzTransactor) TogglePresale(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "togglePresale")
}

// TogglePresale is a paid mutator transaction binding the contract method 0x34393743.
//
// Solidity: function togglePresale() returns()
func (_StickyBoizz *StickyBoizzSession) TogglePresale() (*types.Transaction, error) {
	return _StickyBoizz.Contract.TogglePresale(&_StickyBoizz.TransactOpts)
}

// TogglePresale is a paid mutator transaction binding the contract method 0x34393743.
//
// Solidity: function togglePresale() returns()
func (_StickyBoizz *StickyBoizzTransactorSession) TogglePresale() (*types.Transaction, error) {
	return _StickyBoizz.Contract.TogglePresale(&_StickyBoizz.TransactOpts)
}

// ToggleSale is a paid mutator transaction binding the contract method 0x7d8966e4.
//
// Solidity: function toggleSale() returns()
func (_StickyBoizz *StickyBoizzTransactor) ToggleSale(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "toggleSale")
}

// ToggleSale is a paid mutator transaction binding the contract method 0x7d8966e4.
//
// Solidity: function toggleSale() returns()
func (_StickyBoizz *StickyBoizzSession) ToggleSale() (*types.Transaction, error) {
	return _StickyBoizz.Contract.ToggleSale(&_StickyBoizz.TransactOpts)
}

// ToggleSale is a paid mutator transaction binding the contract method 0x7d8966e4.
//
// Solidity: function toggleSale() returns()
func (_StickyBoizz *StickyBoizzTransactorSession) ToggleSale() (*types.Transaction, error) {
	return _StickyBoizz.Contract.ToggleSale(&_StickyBoizz.TransactOpts)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.TransferFrom(&_StickyBoizz.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _StickyBoizz.Contract.TransferFrom(&_StickyBoizz.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StickyBoizz *StickyBoizzTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StickyBoizz *StickyBoizzSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StickyBoizz.Contract.TransferOwnership(&_StickyBoizz.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_StickyBoizz *StickyBoizzTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _StickyBoizz.Contract.TransferOwnership(&_StickyBoizz.TransactOpts, newOwner)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_StickyBoizz *StickyBoizzTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StickyBoizz.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_StickyBoizz *StickyBoizzSession) Withdraw() (*types.Transaction, error) {
	return _StickyBoizz.Contract.Withdraw(&_StickyBoizz.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns()
func (_StickyBoizz *StickyBoizzTransactorSession) Withdraw() (*types.Transaction, error) {
	return _StickyBoizz.Contract.Withdraw(&_StickyBoizz.TransactOpts)
}

// StickyBoizzApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the StickyBoizz contract.
type StickyBoizzApprovalIterator struct {
	Event *StickyBoizzApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StickyBoizzApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StickyBoizzApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StickyBoizzApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StickyBoizzApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StickyBoizzApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StickyBoizzApproval represents a Approval event raised by the StickyBoizz contract.
type StickyBoizzApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StickyBoizz *StickyBoizzFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*StickyBoizzApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StickyBoizz.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzApprovalIterator{contract: _StickyBoizz.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StickyBoizz *StickyBoizzFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *StickyBoizzApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StickyBoizz.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StickyBoizzApproval)
				if err := _StickyBoizz.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_StickyBoizz *StickyBoizzFilterer) ParseApproval(log types.Log) (*StickyBoizzApproval, error) {
	event := new(StickyBoizzApproval)
	if err := _StickyBoizz.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StickyBoizzApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the StickyBoizz contract.
type StickyBoizzApprovalForAllIterator struct {
	Event *StickyBoizzApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StickyBoizzApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StickyBoizzApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StickyBoizzApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StickyBoizzApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StickyBoizzApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StickyBoizzApprovalForAll represents a ApprovalForAll event raised by the StickyBoizz contract.
type StickyBoizzApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StickyBoizz *StickyBoizzFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*StickyBoizzApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StickyBoizz.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzApprovalForAllIterator{contract: _StickyBoizz.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StickyBoizz *StickyBoizzFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *StickyBoizzApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _StickyBoizz.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StickyBoizzApprovalForAll)
				if err := _StickyBoizz.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_StickyBoizz *StickyBoizzFilterer) ParseApprovalForAll(log types.Log) (*StickyBoizzApprovalForAll, error) {
	event := new(StickyBoizzApprovalForAll)
	if err := _StickyBoizz.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StickyBoizzOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the StickyBoizz contract.
type StickyBoizzOwnershipTransferredIterator struct {
	Event *StickyBoizzOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StickyBoizzOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StickyBoizzOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StickyBoizzOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StickyBoizzOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StickyBoizzOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StickyBoizzOwnershipTransferred represents a OwnershipTransferred event raised by the StickyBoizz contract.
type StickyBoizzOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StickyBoizz *StickyBoizzFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*StickyBoizzOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StickyBoizz.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzOwnershipTransferredIterator{contract: _StickyBoizz.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StickyBoizz *StickyBoizzFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *StickyBoizzOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _StickyBoizz.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StickyBoizzOwnershipTransferred)
				if err := _StickyBoizz.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_StickyBoizz *StickyBoizzFilterer) ParseOwnershipTransferred(log types.Log) (*StickyBoizzOwnershipTransferred, error) {
	event := new(StickyBoizzOwnershipTransferred)
	if err := _StickyBoizz.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StickyBoizzTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the StickyBoizz contract.
type StickyBoizzTransferIterator struct {
	Event *StickyBoizzTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StickyBoizzTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StickyBoizzTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StickyBoizzTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StickyBoizzTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StickyBoizzTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StickyBoizzTransfer represents a Transfer event raised by the StickyBoizz contract.
type StickyBoizzTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StickyBoizz *StickyBoizzFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*StickyBoizzTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StickyBoizz.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &StickyBoizzTransferIterator{contract: _StickyBoizz.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StickyBoizz *StickyBoizzFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *StickyBoizzTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _StickyBoizz.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StickyBoizzTransfer)
				if err := _StickyBoizz.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_StickyBoizz *StickyBoizzFilterer) ParseTransfer(log types.Log) (*StickyBoizzTransfer, error) {
	event := new(StickyBoizzTransfer)
	if err := _StickyBoizz.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
